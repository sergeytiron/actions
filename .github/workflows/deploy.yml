name: Sequential Environment Deployment

on:
  push:
    branches:
      - main
  # Allow manual trigger
  workflow_dispatch:

# IMPORTANT: For the approval gates to work, you MUST configure environments in GitHub:
# 1. Go to your repository settings -> Environments
# 2. Create environments named 'development', 'staging', and 'production'
# 3. For 'staging' and 'production', enable "Required reviewers" and add reviewers
# Without this configuration, the workflow will NOT pause for approval
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: myapp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image as artifact
        run: |
          docker save myapp:latest > myapp-image.tar
          
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: myapp-image.tar
          retention-days: 1

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          
      - name: Load Docker image
        run: docker load < myapp-image.tar
        
      - name: Run container in development
        run: |
          docker run --rm -e ENVIRONMENT="development" -e ENV_CONFIG="Debug mode enabled" myapp:latest
          echo "Development deployment completed successfully"

  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          
      - name: Load Docker image
        run: docker load < myapp-image.tar
        
      - name: Run container in staging
        run: |
          docker run --rm -e ENVIRONMENT="staging" -e ENV_CONFIG="Performance testing enabled" myapp:latest
          echo "Staging deployment completed successfully"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          
      - name: Load Docker image
        run: docker load < myapp-image.tar
        
      - name: Run container in production
        run: |
          docker run --rm -e ENVIRONMENT="production" -e ENV_CONFIG="High availability mode" myapp:latest
          echo "Production deployment completed successfully"
