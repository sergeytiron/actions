name: Multi-Project Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'project-*/Dockerfile'
      - '.github/workflows/**'
  # Allow manual trigger with options
  workflow_dispatch:
    inputs:
      deploy_all:
        description: 'Deploy all projects regardless of changes'
        required: true
        type: boolean
        default: false
      specific_project:
        description: 'Specific project to deploy (leave empty to auto-detect changes)'
        required: false
        type: string

# IMPORTANT: For the approval gates to work, you MUST configure environments in GitHub:
# 1. Go to your repository settings -> Environments
# 2. Create environments named 'development', 'staging', and 'production'
# 3. For 'staging' and 'production', enable "Required reviewers" and add reviewers
# Without this configuration, the workflow will NOT pause for approval
jobs:
  # Detect changed projects
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed to get the changed files

      # Using Paths Filter to detect changed files
      - name: Filter paths
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            project-main:
              - 'project-main/**'
            project-a:
              - 'project-a/**'
            project-b:
              - 'project-b/**'
      
      # Use our custom action to generate the matrix
      - name: Generate Matrix
        id: set-matrix
        uses: ./.github/actions/generate-project-matrix
        with:
          deploy_all: ${{ github.event.inputs.deploy_all }}
          specific_project: ${{ github.event.inputs.specific_project }}
          project_main_changed: ${{ steps.filter.outputs.project-main }}
          project_a_changed: ${{ steps.filter.outputs.project-a }}
          project_b_changed: ${{ steps.filter.outputs.project-b }}

      # Display the matrix for debugging
      - name: Debug matrix output
        run: |
          echo 'Matrix: ${{ steps.set-matrix.outputs.matrix }}'

  # Build and deploy each project in parallel
  build:
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix }}
      fail-fast: false
    name: Build ${{ matrix.project.project_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.project.project_path }}
          push: false
          load: true
          tags: ${{ matrix.project.image_tag }}
          cache-from: type=gha,scope=${{ matrix.project.project_path }}
          cache-to: type=gha,mode=max,scope=${{ matrix.project.project_path }}

      - name: Save Docker image as artifact
        run: |
          docker save ${{ matrix.project.image_tag }} > docker-image-${{ matrix.project.project_path }}.tar
          
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.project.project_path }}
          path: docker-image-${{ matrix.project.project_path }}.tar
          retention-days: 1
          
      - name: Create build info file
        run: |
          echo "${{ matrix.project.project_name }}" > build-info-${{ matrix.project.project_path }}.txt
          echo "${{ matrix.project.image_tag }}" >> build-info-${{ matrix.project.project_path }}.txt
          
      - name: Upload build info as artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-info-${{ matrix.project.project_path }}
          path: build-info-${{ matrix.project.project_path }}.txt
          retention-days: 1

  # Deploy to Development Environment
  dev-deployment:
    needs: [build, detect-changes]
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix }}
      fail-fast: false
    name: Dev - ${{ matrix.project.project_name }}
    environment:
      name: development
    steps:
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info-${{ matrix.project.project_path }}
          
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.project.project_path }}
          
      - name: Load Docker image
        run: docker load < docker-image-${{ matrix.project.project_path }}.tar
        
      - name: Run container in development
        run: |
          PROJECT_PATH="${{ matrix.project.project_path }}"
          IMAGE_TAG=$(tail -n 1 build-info-${PROJECT_PATH}.txt)
          PROJECT_NAME=$(head -n 1 build-info-${PROJECT_PATH}.txt)
          
          echo "Deploying $PROJECT_NAME to development environment..."
          
          docker run --rm \
            -e ENVIRONMENT="development" \
            -e ENV_CONFIG="Debug mode enabled" \
            ${IMAGE_TAG}
            
          echo "$PROJECT_NAME development deployment completed successfully"

  # Deploy to Staging Environment
  staging-deployment:
    needs: [dev-deployment, detect-changes]
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix != '[]' }}
    runs-on: ubuntu-latest
    environment:
      name: staging
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix }}
      fail-fast: false
    name: Staging - ${{ matrix.project.project_name }}
    steps:
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info-${{ matrix.project.project_path }}
          
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.project.project_path }}
          
      - name: Load Docker image
        run: docker load < docker-image-${{ matrix.project.project_path }}.tar
        
      - name: Run container in staging
        run: |
          PROJECT_PATH="${{ matrix.project.project_path }}"
          IMAGE_TAG=$(tail -n 1 build-info-${PROJECT_PATH}.txt)
          PROJECT_NAME=$(head -n 1 build-info-${PROJECT_PATH}.txt)
          
          echo "Deploying $PROJECT_NAME to staging environment..."
          
          docker run --rm \
            -e ENVIRONMENT="staging" \
            -e ENV_CONFIG="Performance testing enabled" \
            ${IMAGE_TAG}
            
          echo "$PROJECT_NAME staging deployment completed successfully"

  # Deploy to Production Environment
  production-deployment:
    needs: [staging-deployment, detect-changes]
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix != '[]' }}
    runs-on: ubuntu-latest
    environment:
      name: production
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix).matrix }}
      fail-fast: false
    name: Production - ${{ matrix.project.project_name }}
    steps:
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info-${{ matrix.project.project_path }}
          
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.project.project_path }}
          
      - name: Load Docker image
        run: docker load < docker-image-${{ matrix.project.project_path }}.tar
        
      - name: Run container in production
        run: |
          PROJECT_PATH="${{ matrix.project.project_path }}"
          IMAGE_TAG=$(tail -n 1 build-info-${PROJECT_PATH}.txt)
          PROJECT_NAME=$(head -n 1 build-info-${PROJECT_PATH}.txt)
          
          echo "Deploying $PROJECT_NAME to production environment..."
          
          docker run --rm \
            -e ENVIRONMENT="production" \
            -e ENV_CONFIG="High availability mode" \
            ${IMAGE_TAG}
            
          echo "$PROJECT_NAME production deployment completed successfully"
